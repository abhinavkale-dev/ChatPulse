// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  email     String?     @unique @db.VarChar(100)
  password  String?     @db.VarChar(100)
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ChatGroup ChatGroup[]

  @@map("users")
}

model ChatGroup {
  id         String       @id @default(uuid()) @db.Uuid
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @db.Uuid
  title      String       @db.VarChar(100)
  passcode   String       @db.VarChar(30)
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  GroupUsers GroupUsers[]
  Chats      Chats[]

  @@map("chat_groups")
}

model GroupUsers {
  id        Int       @id @default(autoincrement())
  group     ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String    @db.Uuid
  name String
  createdAt DateTime  @default(now())

  @@map("group_users")
}

model Chats {
  id String @id @default(uuid()) @db.Uuid
  group ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @db.Uuid
  message String?
  name String
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@map("chats")
}
